---
description: 
globs: 
alwaysApply: true
---
# Opened Files
## File Name
src/services/ClientService.js
## File Content
import prisma from '../config/database.js';
import { NotFoundException, ValidationException } from '../exceptions/AppException.js';
import { validateClientDto } from '../dto/client.dto.js';

function validateSenegalCNI(cni) {
  // Doit être composé de 13 chiffres
  if (!/^\d{13}$/.test(cni)) {
    throw new ValidationException('Le numéro CNI doit contenir exactement 13 chiffres.');
  }
  // Doit commencer par 1 ou 2
  if (!(cni.startsWith('1') || cni.startsWith('2'))) {
    throw new ValidationException('Le numéro CNI doit commencer par 1 ou 2.');
  }
  return cni;
}

export default class ClientService {
  static async createClient(data) {
    validateClientDto(data);
    data.cni = validateSenegalCNI(data.cni);
    return await prisma.client.create({ data });
  }

  static async getAllClients() {
    return await prisma.client.findMany({ include: { numeroClients: true } });
  }

  static async getClientById(id) {
    const client = await prisma.client.findUnique({ where: { id }, include: { numeroClients: true } });
    if (!client) throw new NotFoundException('Client non trouvé');
    return client;
  }

  static async updateClient(id, data) {
    if (data.cni) {
      data.cni = validateSenegalCNI(data.cni);
    }
    validateClientDto({ ...data, cni: data.cni });
    try {
      return await prisma.client.update({ where: { id }, data });
    } catch (error) {
      if (error.code === 'P2025') throw new NotFoundException('Client non trouvé');
      throw new ValidationException(error.message);
    }
  }

  static async deleteClient(id) {
    try {
      await prisma.client.delete({ where: { id } });
      return true;
    } catch (error) {
      if (error.code === 'P2025') throw new NotFoundException('Client non trouvé');
      throw new ValidationException(error.message);
    }
  }
} 
# Opened Files
## File Name
src/dto/numeroClient.dto.js
## File Content
import { ValidationException } from '../exceptions/AppException.js';
import prisma from '../config/database.js';

function validateSenegalOrangeNumber(phoneNumber) {
  // Retirer le préfixe +221 ou 00221 si présent
  let num = phoneNumber.replace(/^\+221|^00221/, '');
  num = num.replace(/\s+/g, '');
  if (!/^\d+$/.test(num)) {
    throw new ValidationException('Le numéro doit contenir uniquement des chiffres.');
  }
  if (num.length !== 9) {
    throw new ValidationException('Le numéro doit contenir exactement 9 chiffres.');
  }
  const prefix = num.substring(0, 2);
  if (["77", "78", "76", "70"].includes(prefix)) {
    return num;
  } else if (num.startsWith("33")) {
    return num;
  } else {
    throw new ValidationException('Ce numéro n\'est pas un numéro Orange Sénégal valide.');
  }
}

function validateCNI(cni) {
  if (!/^\d{13}$/.test(cni)) {
    throw new ValidationException('Le numéro CNI doit contenir exactement 13 chiffres.');
  }
  if (!(cni.startsWith('1') || cni.startsWith('2'))){
    throw new ValidationException('Le numéro CNI doit commencer par 1 ou 2.');
  }
}

// DTO pour la création
export async function validateNumeroClientCreateDto(data) {
  if (!data || typeof data !== 'object') {
    throw new ValidationException('Aucune donnée reçue.');
  }
  if (!data.phoneNumber || typeof data.phoneNumber !== 'string') {
    throw new ValidationException('Le numéro de téléphone est requis.');
  }
  validateSenegalOrangeNumber(data.phoneNumber);
  if (!data.cni || typeof data.cni !== 'string') {
    throw new ValidationException('Le CNI est requis.');
  }
  validateCNI(data.cni);
  if (!data.status || !['Active', 'Inactive'].includes(data.status)) {
    throw new ValidationException('Le statut doit être "Active" ou "Inactive".');
  }
  // Vérifier si le CNI existe déjà dans NumeroClient
  const existingNumeroClient = await prisma.numeroClient.findUnique({
    where: { cni: data.cni }
  });
  if (existingNumeroClient) {
    throw new ValidationException('Un numéro client avec ce CNI existe déjà.');
  }
  // Vérifier si le CNI existe dans Client
  const existingClient = await prisma.client.findUnique({
    where: { cni: data.cni }
  });
  if (!existingClient) {
    throw new ValidationException('Aucun client trouvé avec ce CNI.');
  }
}

// DTO pour la recherche
export function validateNumeroClientSearchDto(query) {
  if (!query.phoneNumber || typeof query.phoneNumber !== 'string') {
    throw new ValidationException('Le numéro de téléphone est requis pour la recherche.');
  }
  return validateSenegalOrangeNumber(query.phoneNumber);
}

// DTO pour l'affichage - transformation des données
export function transformNumeroClientForDisplay(numeroClient) {
  if (!numeroClient) return null;
  
  return {
    id: numeroClient.id,
    phoneNumber: numeroClient.phoneNumber,
    status: numeroClient.status,
    createdAt: numeroClient.createdAt,
    client: numeroClient.client ? {
      nom: numeroClient.client.nom,
      prenom: numeroClient.client.prenom,
      cni: numeroClient.client.cni
    } : null,
    // Masquer le CNI du NumeroClient car il est dans client
    _links: {
      self: `/api/numeros/${numeroClient.id}`,
      client: numeroClient.client ? `/api/clients/${numeroClient.client.id}` : null
    }
  };
}

// DTO pour la recherche avec formatage
export function transformSearchResult(numeroClient) {
  if (!numeroClient) return null;
  
  return {
    found: true,
    numero: {
      phoneNumber: numeroClient.phoneNumber,
      status: numeroClient.status,
      createdAt: numeroClient.createdAt
    },
    client: numeroClient.client ? {
      nom: numeroClient.client.nom,
      prenom: numeroClient.client.prenom,
      cni: numeroClient.client.cni
    } : null,
    message: `Client trouvé avec le numéro ${numeroClient.phoneNumber}`
  };
}

// DTO pour la liste - formatage multiple
export function transformNumeroClientList(numeroClients) {
  return numeroClients.map(transformNumeroClientForDisplay);
} 
# Opened Files
## File Name
docker-compose.yml
## File Content
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - mongo
    environment:
      - NODE_ENV=production
      - PORT=3002
      - ENABLE_DOCS=true
      - DATABASE_URL=mongodb://mongo:27017/gesclient
      # Ajoute ici d'autres variables d'env si besoin
    restart: unless-stopped
    command: node src/app.js

  mongo:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

volumes:
  mongo_data: 
# Opened Files
## File Name
Dockerfile
## File Content
FROM node:20-alpine AS builder

WORKDIR /app

# Install Python, make, g++, et OpenSSL
RUN apk add --no-cache python3 make g++ openssl

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the application
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install MongoDB client et OpenSSL
RUN apk add --no-cache mongodb-tools openssl

# Copy package.json and package-lock.json
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production

# Copy Prisma schema
COPY prisma ./prisma/

# Copy built application from builder stage
COPY --from=builder /app/src ./src
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Expose the port the app runs on
EXPOSE 3002

# Add wait-for-it script (optionnel, à ajouter si besoin)
# COPY wait-for-it.sh /wait-for-it.sh
# RUN chmod +x /wait-for-it.sh

# Command to run the application
CMD ["node", "src/app.js"]

# Add volume for the application and node_modules
VOLUME ["/app/src", "/app/node_modules"] 
# Opened Files
## File Name
src/dto/client.dto.js
## File Content
import { ValidationException } from '../exceptions/AppException.js';

export function validateClientDto(data) {
  if (!data || typeof data !== 'object') {
    throw new ValidationException('Aucune donnée reçue.');
  }
  if (!data.nom || typeof data.nom !== 'string' || data.nom.trim().length < 2) {
    throw new ValidationException('Le nom est requis et doit contenir au moins 2 caractères.');
  }
  if (!data.prenom || typeof data.prenom !== 'string' || data.prenom.trim().length < 2) {
    throw new ValidationException('Le prénom est requis et doit contenir au moins 2 caractères.');
  }
  if (!data.cni || typeof data.cni !== 'string') {
    throw new ValidationException('Le CNI est requis.');
  }
  // Validation structure CNI : 13 chiffres, commence par 1 ou 2
  if (!/^\d{13}$/.test(data.cni)) {
    throw new ValidationException('Le numéro CNI doit contenir exactement 13 chiffres.');
  }
  if (!(data.cni.startsWith('1') || data.cni.startsWith('2'))){
    throw new ValidationException('Le numéro CNI doit commencer par 1 ou 2.');
  }
}

// DTO pour l'affichage - transformation des données
export function transformClientForDisplay(client) {
  if (!client) return null;
  
  return {
    id: client.id,
    nom: client.nom,
    prenom: client.prenom,
    cni: client.cni,
    numeroClients: client.numeroClients ? client.numeroClients.map(numero => ({
      id: numero.id,
      phoneNumber: numero.phoneNumber,
      status: numero.status,
      createdAt: numero.createdAt
    })) : [],
    _links: {
      self: `/api/clients/${client.id}`,
      numeros: `/api/numeros?clientId=${client.id}`
    }
  };
}

// DTO pour la liste - formatage multiple
export function transformClientList(clients) {
  return clients.map(transformClientForDisplay);
}

// DTO pour la recherche par CNI
export function validateClientSearchDto(query) {
  if (!query.cni || typeof query.cni !== 'string') {
    throw new ValidationException('Le CNI est requis pour la recherche.');
  }
  // Validation structure CNI
  if (!/^\d{13}$/.test(query.cni)) {
    throw new ValidationException('Le numéro CNI doit contenir exactement 13 chiffres.');
  }
  if (!(query.cni.startsWith('1') || query.cni.startsWith('2'))){
    throw new ValidationException('Le numéro CNI doit commencer par 1 ou 2.');
  }
  return query.cni;
} 
# Opened Files
## File Name
src/responses/ApiResponse.js
## File Content
class ApiResponse {
  static success(res, data = null, message = 'Opération réussie', statusCode = 200) {
    return res.status(statusCode).json({
      success: true,
      message,
      data,
      timestamp: new Date().toISOString()
    });
  }

  static error(res, message = 'Une erreur est survenue', statusCode = 500, errors = null) {
    return res.status(statusCode).json({
      success: false,
      message,
      errors,
      timestamp: new Date().toISOString()
    });
  }

  static created(res, data = null, message = 'Ressource créée avec succès') {
    // Toujours 201 pour une création
    return this.success(res, data, message, 201);
  }

  static noContent(res, message = 'Aucun contenu') {
    return this.success(res, null, message, 204);
  }

  static badRequest(res, message = 'Requête invalide', errors = null) {
    return this.error(res, message, 400, errors);
  }

  static unauthorized(res, message = 'Non autorisé') {
    return this.error(res, message, 401);
  }

  static forbidden(res, message = 'Accès interdit') {
    return this.error(res, message, 403);
  }

  static notFound(res, message = 'Ressource non trouvée') {
    return this.error(res, message, 404);
  }

  static conflict(res, message = 'Conflit de données', errors = null) {
    return this.error(res, message, 409, errors);
  }

  static validationError(res, errors) {
    return this.error(res, 'Erreur de validation', 422, errors);
  }
}

export default ApiResponse; 
